
from flask import Flask,request,abort
import requests
from app.Config import *
import json

from pythainlp.tokenize import sent_tokenize, word_tokenize
from pythainlp import Tokenizer
from pythainlp.util import dict_trie
from pythainlp.corpus.common import thai_words
from gensim.models import KeyedVectors
from tensorflow.keras.preprocessing.sequence import pad_sequences
import numpy as np
import tensorflow as tf


def load_model() :
    loaded_model = tf.keras.models.load_model('model')
    loaded_model.summary()
    return loaded_model
    
Model = load_model()

def load_w2vec_model():
    word2vec_model = KeyedVectors.load_word2vec_format('wordtovec/LTW2V_v0.1.bin', binary=True, unicode_errors='ignore')
    return word2vec_model

Word2vec_model = load_w2vec_model()

def map_word_index(word_seq):
    indices = [] 
    for word in word_seq:
        if word in Word2vec_model.vocab:
            indices.append(Word2vec_model.vocab[word].index + 1)
        else:
            indices.append(1)
    return indices

app=Flask(__name__)

@app.route('/webhook',methods=['POST','GET'])

def webhook():
    if request.method=='POST':
        payload =request.json
        Reply_token=payload['events'][0]['replyToken']
        message=payload['events'][0]['message']['text']
        Reply_text= prediction(message)
        print(Reply_text,flush=True)
        ReplyMessage(Reply_token,Reply_text,Channel_access_token)
        return request.json,200
    elif request.method=='GET':
        return "this is method GET!!!",200
    else:
        abort(400)



def prediction(message):
    words = ["กยศ","กรอ","กู้","กองทุนเงินให้กู้ยืมเพื่อการศึกษา"]
    custom_words_list = set(thai_words())
    custom_words_list.update(words)
    trie = dict_trie(dict_source=custom_words_list)
    word_seq = word_tokenize(message, engine="newmm", custom_dict=trie)
    word_indices = map_word_index(word_seq)
    max_leng = Model.layers[0].output_shape[0][1]
    padded_wordindices = pad_sequences([word_indices], maxlen=max_leng, value=0)
    logit = Model.predict(padded_wordindices, batch_size=32)
    index = [ logit[0][pred] for pred in np.argmax(logit, axis=1) ][0]
    index_to_label = sorted(['ประเภทของกยศ','ข้อดีข้อเสียของการกู้มั้ย','วงเงินในการกู้ยืม','ขั้นตอนการกู้ยืม','ทักทาย','ชั่วโมงจิตอาสา','วีธีการชำระเงิน','กรณีผิดข้อสัญญา','ความเเตกต่างของกรอกับกยศ','ช่องทางการติดต่อ'])
    predict = [index_to_label[pred] for pred in np.argmax(logit, axis=1) ][0]
    if index > 0.7:
        if predict == "ทักทาย":
            Reply_text="สวัสดีครับ กองทุนเพื่อการศึกษายินดีให้คำปรึกษาครับ"

        elif predict == "ประเภทของกยศ":
            Reply_text="ประเภทของกยศ จะมีประมาณ 2 ประเภทหลักๆ ดังนี้\nประเภทที่ 1  นักเรียนหรือนักศึกษาที่ขาดแคลนทุนทรัพย์ หรือเรียกว่า กยศ.\nประเภทที่ 2  นักเรียนหรือนักศึกษาที่ศึกษาในสาขาวิชาที่เป็นความต้องการหลัก ซึ่งมีความชัดเจนของการผลิต\nกำลังคนและมีความจำเป็นต่อการพัฒนาประเทศ หรือเรียกว่า กรอ."
        
        elif predict == "ข้อดีข้อเสียของการกู้มั้ย":
            Reply_text="ข้อดีมีดังนี้\n1. เมื่อเราจบเราสามารถถยอยจ่ายหนี้ได้หรือสามารถจ่ายครบยอดได้เลย\n2. สามารถเเบ่งเบาภาระของที่บ้านได้พอสมควร\nข้อเสียมีดังนี้\n1. เงินค่ารองชีพจะได้ช้าในบางครั้งเเต่เมื่อได้รับงวดเเรกจะมีการทบเงินที่ช้าเลย\n2. ขั้นตอนในการกู้ค่อนข้างเยอะเเละต้องใช้เอกสารจำนวนมากในการทำสัญญา"
        
        elif predict == 'วงเงินในการกู้ยืม':
            Reply_text="วงเงินสำหรับการกู้ยืมจะมีให้ ดังนี้\n1.) การกู้ยืมค่าเทอมหรือค่าการศึกษาต่อภาคเรียนสามารถกู้ได้สูงสุด 35,000 บาทถ้วน ต่อ 1 ภาคการศึกษา\n2.) การกู้ยืมค่าครองชีพต่อ 1 ภาคเรียนสามารถกู้ได้สูงสุด 18,000 บาทถ้วน ต่อ 1 ภาคการศึกษา"
        
        elif predict == 'ขั้นตอนการกู้ยืม':
            Reply_text="ขั้นตอนการกู้ยืมมีดังนี้\n1. https://media.discordapp.net/attachments/972745472403976212/1029270621911257109/all-7step-01-01_0_0.jpg?width=806&height=453 \n2. https://media.discordapp.net/attachments/972745472403976212/1029270622183890944/1-01_1.jpg?width=806&height=453\nซึ่งภาคเรียนอื่นๆ ก็ทำตามภาคเรียนที่ 1 ซำ้ไปเรื่อยๆครับ"
        
        elif predict == 'ชั่วโมงจิตอาสา':
            Reply_text="กองทุนได้กำหนดคุณสมบัติให้ผู้กู้ต้องทำกิจกรรมจิตสาธารณะที่เป็นประโยชน์ต่อสังคมในระหว่างปีการศึกษา เพื่อขอกู้ยืมเงินในปีการศึกษาถัดไป โดยมีวัตถุประสงค์เพื่อขัดเกลาจิตใจให้มีความเมตตากรุณา มีความเสียสละและมีจิตสาธารณะ โดยกำหนดชั่วโมงสำหรับผู้ขอกู้ยืมเงินแต่ละกลุ่ม ดังนี้\n1. กรณีเป็นผู้กู้ยืมเงินรายใหม่ ไม่กำหนดจำนวนชั่วโมง\n2. กรณีเป็นผู้กู้ยืมเงินรายเก่าเปลี่ยนระดับการศึกษา ไม่กำหนดจำนวนชั่วโมง\n3. กรณีเป็นผู้กู้ยืมเงินรายเก่าเลื่อนชั้นปีทุกระดับการศึกษา กำหนดจำนวนไม่น้อยกว่า 36 ชั่วโมงแนะนำ\nหาชั่วโมงจิตอาสาจาก e-Learning 1คลิปที่ดูได้3ชั่วโมงจิตอาสา"
        
        elif predict == 'วีธีการชำระเงิน':
            Reply_text="1. ผู้กู้ยืมเงินต้องชำระเงินกู้ยืม พร้อมทั้งดอกเบี้ยหรือประโยชน์อื่นใดร้อยละ 1 ต่อปี โดยต้องคืน ให้กองทุนให้เสร็จสิ้นภายใน 15 ปี นับแต่วันที่ต้องเริ่มชำระหนี้\n2. ให้ผู้กู้ยืมเงินชำระหนี้งวดแรก ภายในวันที่ 5 กรกฎาคม หลังจากครบระยะเวลาปลอดหนี้\n3. การชำระหนี้งวดต่อๆไปให้ผู้กู้ยืมเงินชำระเงินต้นคืน ตามอัตราผ่อนชำระที่กองทุนกำหนด พร้อมด้วยดอกเบี้ยหรือประโยชน์อื่นใด ในอัตราร้อยละ 1 ต่อปีของเงินต้นที่คงค้าง ภายในวันที่ 5 กรกฎาคมของทุกปี\n4. หากผู้กู้ยืมเงินผิดนัดชำระหนี้ ผู้กู้ยืมเงินจะต้องชำระค่าปรับ หรือค่าธรรมเนียมจัดการกรณีผิดนัดชำระหนี้ตามอัตราที่กองทุนกำหนด\n5. ผู้กู้ยืมเงินที่มีความประสงค์จะขอชำระหนี้คืนก่อนครบกำหนดระยะเวลาชำระหนี้ หรือก่อนครบระยะเวลาปลอดหนี้ 2 ปี สามารถชำระคืนได้โดยไม่เสียดอกเบี้ยหรือประโยชน์อื่นใดหมายเหตุ\n(ก)ให้ผู้กู้ยืมเงินไปติดต่อแสดงตน ขอชำระหนี้ และเลือกวิธีการผ่อนชำระเป็นรายปี หรือรายเดือนกับผู้บริหารและจัดการเงินให้กู้ยืมได้ทุกสาขาก่อนที่จะครบระยะเวลาปลอดหนี้ 2 ปี\n(ข)กรณีผู้กู้ยืมเงินยังอยู่ในระหว่างการศึกษา แต่ไม่ได้กู้ยืมในปีการศึกษาใด ต้องแจ้งสถานภาพการศึกษาต่อผู้บริหารและจัดการเงินให้กู้ยืมโดยให้นำใบรับรองจากสถานศึกษา และเลขบัตรประจำตัวประชาชนพร้อมหมายเลขโทรศัพท์ของผู้กู้ไปแสดงทุกปีจนกว่าจะสำเร็จการศึกษา"
        
        elif predict == 'กรณีผิดข้อสัญญา':
            Reply_text="กรณีผิดนัดชำระหนี้ -> ต้องเสียค่าปรับหรือค่าธรรมเนียมจัดการในอัตรา เบี่ยปรับ 7.5% ต่อปี\n1. แนวปฏิบัติสำหรับผู้กู้ยืมที่ถูกดำเนินคดี\nกรณีที่ 1 หากผู้กู้ยืมประสงค์ให้ถอนฟ้อง\nผู้กู้ยืมต้องชำระหนี้ปิดบัญชี พร้อมจ่ายค่าทนาย และส่งหลักฐานการชำระหนี้ปิดบัญชีให้กองทุนพิจารณาถอนฟ้อง\n01.ชำระหนี้ปิดบัญชี พร้อมค่าทนาย ดังนี้\n 1. ชำระหนี้เงินกู้ยืมที่ธนาคารกรุงไทย หรือ ธนาคารอิสลามแห่งประเทศไทย\n 2. ชำระค่าทนายความ 5,500 บาท ก่อนวันที่ศาลนัด 2 สัปดาห์ที่ธนาคารกรุงไทยเท่านั้น โดยชำระผ่านระบบ Teller Payment  (กยศ. code : 9067)   (กรอ. code : 92707)\n02.ส่งหลักฐานการชำระหนี้ปิดบัญชี พร้อมแจ้งชื่อและเบอร์ติดต่อกลับ ดังนี้\n 1. ใบเสร็จการชำระหนี้ปิดบัญชี กยศ. หรือ กรอ.\n 2. ใบเสร็จการชำระค่าทนายความ\n“ผู้กู้ กยศ.” ส่งให้แก่ บริษัท กรุงไทยกฎหมาย จำกัด Fax: 0 2261 3811 โทรศัพท์ 0 2261 3739 ต่อ 8778\n“ผู้กู้ กรอ.” ส่งให้แก่ ฝ่ายคดีและบังคับคดี กยศ. ระบุ “ขอให้ถอนฟ้อง กรอ. หรือผู้กู้ยืมกลุ่มไกล่เกลี่ย” Fax: 0 2016 4940 โทรศัพท์ 0 2016 4888 ต่อ 550 – 587\nกรณีที่ 2 ผู้กู้ยืมที่ไม่สามารถชำระหนี้เพื่อถอนฟ้องได้ ผู้กู้และผู้ค้ำประกันทุกคนจะต้องไปศาล\n01.เจรจาไกล่เกลี่ยประนีประนอมยอมความในชั้นศาล กรณีที่ผู้กู้ยืมและผู้ค้ำประกันไปตามที่ศาลนัดหมาย สามารถขอผ่อนชำระหนี้รายเดือนให้เสร็จสิ้นภายในระยะเวลาไม่เกิน 9 ปี\n•กรณีบุคคลใดบุคคลหนี่งไม่สามารถไปศาลได้ให้ทำหนังสือมอบอำนาจ พร้อมแนบสำเนาบัตรประชาชนและลงลายมือชื่อรับรองความถูกต้องให้บุคคลที่บรรลุ  นิติภาวะทำแทนได้\n02.กรณีที่ผู้กู้ยืมและผู้ค้ำประกันไม่ไปตามที่ศาลนัด 'ศาลจะสั่งพิพากษาชำระหนี้ทั้งจำนวน' โดยจะส่งคำบังคับแจ้งให้ผู้กู้ยืมและผู้ค้ำประกัน ชำระหนี้ให้เสร็จสิ้นใน 30 วัน หลังจากได้รับคำสั่งศาล\n2. ในกรณีที่ผู้กู้เสียชีวิต จะต้องดำเนินการอย่างไร\nกรณีที่ผู้กู้ยืมถึงแก่ความตายให้สัญญากู้ยืมเงิน หน้าที่ และความรับผิดชอบ ที่ผู้กู้ยืมเงินมีต่อกองทุนเป็นอันระงับไป โดยให้ญาติแจ้งธนาคารกรุงไทย/ธนาคารอิสลามฯ ทราบ โดยยื่นเอกสารหลักฐานเซ็นรับรองสำเนาถูกต้องทุกฉบับ ดังนี้​\n-  สำเนาใบมรณบัตรของผู้กู้ยืมเงิน\n-  สำเนาทะเบียนบ้านของผู้กู้ยืมเงิน\n-  สำเนาบัตรประจำตัวประชาชนของผู้กู้ยืม (ถ้ามี)\n-  สำเนาบัตรประจำตัวประชาชนของผู้แจ้ง\n3. ผู้กู้ยืมถูกฟ้องแล้ว ได้รับคำบังคับคดีจะต้องทำอย่างไร\nกรณีที่ผู้กู้ยืมได้รับคำบังคับจากศาล เนื่องจากผู้กู้ยืมไม่ได้ชำระหนี้จนถูกดำเนินคดีต่อศาล และไม่ได้ไปตามที่ศาลนัด ทำให้ศาลพิพากษาให้ชำระหนี้ทั้งหมดพร้อมทั้งดอกเบี้ยและเบี้ยปรับที่ผิดนัด ผู้กู้ยืมและผู้ค้ำประกันจะต้องชำระหนี้ตามคำพิพากษา\nพร้อมทั้งค่าฤชาธรรมเนียมที่ศาลสั่งซึ่งรวมถึงค่าทนายความด้วย (โดยชำระหนี้ที่ บมจ.ธนาคารกรุงไทยทุกสาขา)"
        
        elif predict == 'ความเเตกต่างของกรอกับกยศ':
            Reply_text="กลุ่มเป้าหมายกยศ.\n1.ขาดแคลนทุนทรัพย์(รายได้ครอบครัวไม่เกิน 200,000 บาท)\n2.อายุของผู้กู้ขณะกู้เมื่อนับรวมกับจ านวนปีของหลักสูตรที่เรียนรวมกับระยะเวลาปลอดหนี้ 2 ปี และระยะเวลาผ่อนช าระอีก 15 ปี รวมกันแล้วต้องไม่เกิน 60 ปี\nกลุ่มเป้าหมายกรอ. \n1.ไม่จำกัดรายได้ครอบครัว\n2.อายุไม่เกิน 30 ปีในปีการศึกษาที่ยื่นกู้\nระดับการศึกษากยศ.\n1. ม. ปลาย ปวช. ปวส. อนุปริญญาและปริญญาตร\n2.ระดับ ปวส. และระดับอนุปริญญา/ปริญญาตรีกู้ได้ทุกสาขาวิชา\nระดับการศึกษากรอ. \n1.ปวส. อนุปริญญาและปริญญาตรี\n2.ระดับ ปวส. กู้ยืมได้ทุกสาขาวิชา\n3.ระดับอนุปริญญา/ปริญญาตรี กู้ยืมได้เฉพาะสาขาวิชาที่เป็นไปตามประกาศที่คณะกรรมการก าหนด (สาขาวิชาที่เป็นความต้องการหลักของประเทศ)\nประเภทของการกู้ยืมกยศ.\n1.ค่าเล่าเรียน\n2.ค่าครองชีพ\nประเภทของการกู้ยืมกรอ.\n1.ค่าเล่าเรียน\n2.ค่าครองชีพ (เฉพาะผู้กู้ที่มีรายได้ครอบครัวต่ำกว่า 200,000)\nการชำระหนี้กยศและกรอ.เหมือนกัน\n-เมื่อสำเร็จหรือเลิกการศึกษา 2 ปี และต้องช าระให้เสร็จสิ้นภายในระยะเวลา 15 ปี\nอัตราดอกเบี้ยกยศและกรอ.เหมือนกัน\n-ร้อยละ 1 บาทต่อปี"
        
        elif predict == 'ช่องทางการติดต่อ':
            Reply_text="สามารถติดต่อได้ทาง เว็บไซต์หลัก https://www.studentloan.or.th/th/contact\nCall Center : 0 2016 4888 โทรศัพท์ : 0-2016-2600 โทรสาร : 0-2016-2666\nE-Mail : info@studentloan.or.th"
    
    else: Reply_text="ฉันไม่เข้าใจคำถามนี้"
    return Reply_text

def ReplyMessage(Reply_token,TextMessage,Line_Acees_Token):
    LINE_API='https://api.line.me/v2/bot/message/reply/'
    
    Authorization='Bearer {}'.format(Line_Acees_Token)
    print(Authorization)
    headers={
        'Content-Type':'application/json; char=UTF-8',
        'Authorization':Authorization
    }

    data={
        "replyToken":Reply_token,
        "messages":[{
            "type":"text",
            "text":TextMessage
        }
        ]
    }
    data=json.dumps(data) # json
    r=requests.post(LINE_API,headers=headers,data=data)
    return 200